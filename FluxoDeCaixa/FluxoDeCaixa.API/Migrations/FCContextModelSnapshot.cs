// <auto-generated />
using System;
using FluxoDeCaixa.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FluxoDeCaixa.API.Migrations
{
    [DbContext(typeof(FCContext))]
    partial class FCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AI")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.Lancamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LivroCaixaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TipoLancamento")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorLancamento")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("LivroCaixaId");

                    b.ToTable("lancamento", (string)null);
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.LivroCaixa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataMovimento")
                        .HasColumnType("Date");

                    b.Property<decimal>("SaldoAnterior")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.ToTable("livrocaixa", (string)null);
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acesso")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasComment("AcessToken");

                    b.Property<string>("Atualizacao")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasComment("RefreshToken");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiraEm")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevogadoEm")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("token", (string)null);
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BloqueioExpiraEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashSenha")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("NumeroFalhasAoAcessar")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UltimoAcessoEm")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.Lancamento", b =>
                {
                    b.HasOne("FluxoDeCaixa.Domain.Entities.LivroCaixa", "LivroCaixa")
                        .WithMany("Lancamentos")
                        .HasForeignKey("LivroCaixaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LivroCaixa");
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.Token", b =>
                {
                    b.HasOne("FluxoDeCaixa.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Tokens")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.Usuario", b =>
                {
                    b.OwnsOne("FluxoDeCaixa.Domain.ValuesObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(100)
                                .IsUnicode(false)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Email");

                            b1.HasKey("UsuarioId");

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("usuario");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.LivroCaixa", b =>
                {
                    b.Navigation("Lancamentos");
                });

            modelBuilder.Entity("FluxoDeCaixa.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
